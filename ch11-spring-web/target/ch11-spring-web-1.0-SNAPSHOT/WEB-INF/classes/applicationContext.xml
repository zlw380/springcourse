<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">

<!--    一般把数据库的配置信息写在一个独立的文件中
        指定jdbc.properties文件的位置
        将所有属性放入一个Map<K,V>中-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

<!--    声明数据源DataSource，创建DruidDataSource类的对象-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
<!--        set注入给DruidDataSource提供连接数据库的信息-->
<!--        使用属性配置文件中的数据，语法${key}-->
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <property name="maxActive" value="20" />
<!--            <property name="url" value="jdbc:mysql://localhost:3306/ssm?characterEncoding=utf-8" />
            <property name="username" value="root" />
            <property name="password" value="3333" />
            <property name="maxActive" value="20" />-->
    </bean>

<!--    声明的是mybatis-spring整合包中所提供的SqlSessionFactoryBean类
        该类在Maven: org.mybatis:mybatis-spring:1.3.1 包中，可一步到位创建SqlSessionFactory对象
        不需要再像mybatis框架:new SqlSessionFactoryBuilder.build(mybatis.xml)
        SqlSessionFactory类的对象只需要创建一个
        其实在spring配置文件中声明的类是SqlSessionFactoryBean
        但最后获得的是SqlSessionFactory类的对象
        因为SqlSessionFactoryBean在内部调用了sqlSessionFactoryBuilder.build(configuration)

        创建SqlSessionFactory对象时，声明了所有Dao接口对应的mapper文件（所有的mapper文件/SqlSessionFactory）

        创建其中一个Dao接口的实现类对象(或其代理对象)后，该对象可以调用这个Dao接口的所有方法（对应其中一个mapper文件/StudentDao）
        如：StudentDao dao = new StudentDaoImpl();
            List<Student> students = dao.selectStudents();
        或：StudentDao dao = sqlSession.getMapper(StudentDao.class);
            List<Student> students = dao.selectStudents();

        实现类的每一个方法都是通过调用SqlSession会话对象的某个方法访问数据库再返回值
        其参数就是这个Dao接口对应的mapper文件中的其中一个SQL语句的id属性（对应一个mapper文件中的某个标签/SqlSession）
        如：String sqlId="org.example.dao.StudentDao.selectStudents";
            List<Student> students = sqlSession.selectList(sqlId);
        最后该对象调用了其中的某一个方法实现CRUD操作
-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        set注入，把数据库连接池赋给了dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
<!--        指定mybatis主配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

<!--    创建Dao对象，使用SqlSession的getMapper（StudentDao.class）
        直接通过声明mybatis-spring整合包中提供的MapperScannerConfigurer类创建
        MapperScannerConfigurer:在内部调用了getMapper生成每个Dao接口的代理对象
        不需要再像mybatis框架:
        SqlSession sqlSession = factory.openSession();
        StudentDao dao= sqlSession.getMapper(StudentDao.class);
        -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        通过容器中的id指定SqlSessionFactory对象-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
<!--        指定包名，包名是Dao接口所在的包名
            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行
            一次getMapper()方法，得到每个接口的Dao对象。
            创建好的Dao对象放入到spring容器中-->
        <property name="basePackage" value="org.example.dao"/>
    </bean>

<!--    声明service-->
    <bean id="studentService" class="org.example.service.impl.StudentServiceImpl">
        <property name="studentDao" ref="studentDao"/>
    </bean>

</beans>